// <auto-generated />
using System;
using HeThongQuanLyCongTacKhaoThi.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeThongQuanLyCongTacKhaoThi.Data.Migrations
{
    [DbContext(typeof(HeThongQuanLyCongTacKhaoThiDbContext))]
    partial class HeThongQuanLyCongTacKhaoThiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClassID")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_TeacherID")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassID");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efe5c78c-bbc5-40e5-a106-1f07d4b4fcdb"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3b8e53da-d596-4a45-9a6d-b231d1e2a0d0",
                            Email = "keycodemon@gmail.com",
                            EmailConfirmed = true,
                            Gender = true,
                            LockoutEnabled = false,
                            Name = "Keycode Mon",
                            NormalizedEmail = "keycodemon@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEJpX4qMUp4/UmCWCnY3Fc09I4qJ7QiHZkdinU6p/oYYfk7xX6mc9CcJ3CiitgU1omA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("4a2d9b6e-97c4-41bd-a929-f778972db109"),
                            AccessFailedCount = 0,
                            Address = "Số 80 - Hai Bà Trưng - Vạn Giã - Vạn Ninh - Khánh Hoà",
                            Birthday = new DateTime(1999, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassID = "DHCN4A",
                            ConcurrencyStamp = "b8bd2aae-6f73-4a5e-b72e-d1a8f5437f69",
                            Email = "htthinh1999@gmail.com",
                            EmailConfirmed = true,
                            Gender = true,
                            LockoutEnabled = false,
                            Name = "Huỳnh Tấn Thịnh",
                            NormalizedEmail = "htthinh1999@gmail.com",
                            NormalizedUserName = "htthinh",
                            PasswordHash = "AQAAAAEAACcQAAAAEJA8yDkn2cjJyZajR9U3VQdj33y51C90RGJQRiK9HRm7f1lT7EWzKUFWvVbZ1s7Z/w==",
                            PhoneNumber = "0977393641",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Student_TeacherID = "17ĐC027",
                            TwoFactorEnabled = false,
                            UserName = "htthinh"
                        },
                        new
                        {
                            Id = new Guid("9e7773ef-083c-4a8e-8ed2-9e36cd704913"),
                            AccessFailedCount = 0,
                            Address = "Khánh Hoà",
                            Birthday = new DateTime(2000, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassID = "DHCN4A",
                            ConcurrencyStamp = "dd87c983-dbde-4111-9b27-9224dc3ba0b1",
                            Email = "sv1@gmail.com",
                            EmailConfirmed = true,
                            Gender = true,
                            LockoutEnabled = false,
                            Name = "Sinh viên 1",
                            NormalizedEmail = "sv1@gmail.com",
                            NormalizedUserName = "sv1",
                            PasswordHash = "AQAAAAEAACcQAAAAENFrISsti66cm2VZX0fpbQDxJSFk4Ke8skUkgZ9kqjWba7zZF3Y0pvb7hOVAnQKt6w==",
                            PhoneNumber = "0987333644",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Student_TeacherID = "17ĐC028",
                            TwoFactorEnabled = false,
                            UserName = "sv1"
                        },
                        new
                        {
                            Id = new Guid("8bc30f33-6382-45fd-a54a-0dec677631d9"),
                            AccessFailedCount = 0,
                            Address = "Khánh Hoà",
                            Birthday = new DateTime(2000, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassID = "DHCN4A",
                            ConcurrencyStamp = "74f8961b-d5e5-4128-9dcb-d3f4ff46fa7f",
                            Email = "sv2@gmail.com",
                            EmailConfirmed = true,
                            Gender = true,
                            LockoutEnabled = false,
                            Name = "Sinh viên 2",
                            NormalizedEmail = "sv2@gmail.com",
                            NormalizedUserName = "sv2",
                            PasswordHash = "AQAAAAEAACcQAAAAEEt7H8QzR+73LRFsAUKk0CxuPY8kgmomfhoYg41NWso0QvCPgKW2hnMRspnGvbxWBQ==",
                            PhoneNumber = "0987666644",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Student_TeacherID = "17ĐC023",
                            TwoFactorEnabled = false,
                            UserName = "sv2"
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Answer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("ANSWER");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = "diem toan",
                            IsCorrect = false,
                            QuestionID = 1
                        },
                        new
                        {
                            ID = 2,
                            Content = "3diemtoan",
                            IsCorrect = false,
                            QuestionID = 1
                        },
                        new
                        {
                            ID = 3,
                            Content = "_diemtoan",
                            IsCorrect = true,
                            QuestionID = 1
                        },
                        new
                        {
                            ID = 4,
                            Content = "-diemtoan",
                            IsCorrect = false,
                            QuestionID = 1
                        },
                        new
                        {
                            ID = 5,
                            Content = "Nó được khai báo tất cả các hàm, ngoại trừ hàm main()",
                            IsCorrect = false,
                            QuestionID = 2
                        },
                        new
                        {
                            ID = 6,
                            Content = "Nó được khai báo ngoài tất cả các hàm kể cả hàm main()",
                            IsCorrect = true,
                            QuestionID = 2
                        },
                        new
                        {
                            ID = 7,
                            Content = "Nó được khai báo bên ngoài hàm main()",
                            IsCorrect = false,
                            QuestionID = 2
                        },
                        new
                        {
                            ID = 8,
                            Content = "Nó được khai báo bên trong hàm main()",
                            IsCorrect = false,
                            QuestionID = 2
                        },
                        new
                        {
                            ID = 9,
                            Content = "Nó được khai báo bên trong các hàm hoặc thủ tục, kể cả hàm main()",
                            IsCorrect = true,
                            QuestionID = 3
                        },
                        new
                        {
                            ID = 10,
                            Content = "Nó được khai báo bên trong các hàm ngoại trừ hàm main()",
                            IsCorrect = false,
                            QuestionID = 3
                        },
                        new
                        {
                            ID = 11,
                            Content = "Nó được khai báo bên trong hàm main()",
                            IsCorrect = false,
                            QuestionID = 3
                        },
                        new
                        {
                            ID = 12,
                            Content = "Nó được khai báo bên ngoài các hàm kể cả hàm main()",
                            IsCorrect = false,
                            QuestionID = 3
                        },
                        new
                        {
                            ID = 13,
                            Content = "Đệ quy khiến chương trình bị treo.",
                            IsCorrect = false,
                            QuestionID = 4
                        },
                        new
                        {
                            ID = 14,
                            Content = "Đệ quy vô hạn tiêu tốn toàn bộ bộ nhớ của hệ thống dành cho chương trình và khiến cho chương trình kết thúc một cách bất thường.",
                            IsCorrect = false,
                            QuestionID = 4
                        },
                        new
                        {
                            ID = 15,
                            Content = "	Gọi đệ quy gián tiếp luôn gây ra đệ quy vô hạn.",
                            IsCorrect = true,
                            QuestionID = 4
                        },
                        new
                        {
                            ID = 16,
                            Content = "Nếu lời gọi đệ quy không đi đến điểm dừng (base case) thì đệ quy vô hạn sẽ xuất hiện.",
                            IsCorrect = false,
                            QuestionID = 4
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Class", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("StudentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ID");

                    b.ToTable("CLASS");

                    b.HasData(
                        new
                        {
                            ID = "DHCN1A",
                            Name = "Đại học công nghệ 1A",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN1B",
                            Name = "Đại học công nghệ 1B",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN1C",
                            Name = "Đại học công nghệ 1C",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN1D",
                            Name = "Đại học công nghệ 1D",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN2A",
                            Name = "Đại học công nghệ 2A",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN2B",
                            Name = "Đại học công nghệ 2B",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN3A",
                            Name = "Đại học công nghệ 3A",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN3B",
                            Name = "Đại học công nghệ 3B",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN3C",
                            Name = "Đại học công nghệ 3C",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN4A",
                            Name = "Đại học công nghệ 4A",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHCN4B",
                            Name = "Đại học công nghệ 4B",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHVT1",
                            Name = "Đại học viễn thông 1",
                            StudentCount = 0
                        },
                        new
                        {
                            ID = "DHVT2",
                            Name = "Đại học viễn thông 2",
                            StudentCount = 0
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Exam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("EXAM");
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.ExamDetail", b =>
                {
                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ExamID", "QuestionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("EXAM_DETAIL");
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("SubjectID");

                    b.ToTable("QUESTION");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = "Những tên biến nào dưới đây được viết đúng theo quy tắc đặt tên của ngôn ngữ lập trình C?",
                            GroupID = 1,
                            IsMultipleChoice = true,
                            SubjectID = "CC4206"
                        },
                        new
                        {
                            ID = 2,
                            Content = "Một biến được gọi là biến toàn cục nếu:",
                            GroupID = 1,
                            IsMultipleChoice = true,
                            SubjectID = "CC4206"
                        },
                        new
                        {
                            ID = 3,
                            Content = "Một biến được gọi là biến cục bộ nếu:",
                            GroupID = 1,
                            IsMultipleChoice = true,
                            SubjectID = "CC4206"
                        },
                        new
                        {
                            ID = 4,
                            Content = "Nhận định nào sau đây KHÔNG ĐÚNG về đệ quy vô hạn?",
                            GroupID = 2,
                            IsMultipleChoice = true,
                            SubjectID = "CC4206"
                        },
                        new
                        {
                            ID = 5,
                            Content = "Trong các phương pháp sắp xếp: lựa chọn, chèn, đổi chỗ(nổi bọt), quicksort (sắp xếp nhanh), mergesort (sắp xếp trộn), thì phương pháp nào là phù hợp nhất để sắp xếp trên danh sách liên kết đơn ? Giải thích ? ",
                            GroupID = 2,
                            IsMultipleChoice = false,
                            SubjectID = "CC4206"
                        },
                        new
                        {
                            ID = 6,
                            Content = "Trình bày sự khác biệt giữa mảng cấp phát bộ nhớ động và mảng cấp phát tĩnh? Khi nào dùng mảng cấp phát động, mảng cấp phát tĩnh ? Cho ví dụ ?",
                            GroupID = 2,
                            IsMultipleChoice = false,
                            SubjectID = "CC4206"
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.QuestionGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("QUESTION_GROUP");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Nhóm câu hỏi chương 1"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Nhóm câu hỏi chương 2"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Nhóm câu hỏi chương 3"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Nhóm câu hỏi chương 4"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Nhóm câu hỏi chương 5"
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Result", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<float>("Mark")
                        .HasColumnType("real");

                    b.Property<int>("ScoreID")
                        .HasColumnType("int");

                    b.Property<int>("StudentAnswerID")
                        .HasColumnType("int");

                    b.Property<string>("SubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("ScoreID");

                    b.HasIndex("StudentAnswerID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("UserID");

                    b.ToTable("RESULT");
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.RoleAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61a4fad5-402c-4ce0-845d-1fbd2b91956f"),
                            ConcurrencyStamp = "1a3e4d69-869f-4407-ab99-6b407b830ee7",
                            Description = "Vai trò quản trị viên",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("1e6d489f-1df4-4dab-b873-ce3224d87f94"),
                            ConcurrencyStamp = "5b2b009e-478d-46e9-b4c4-3e89ae270abf",
                            Description = "Vai trò giảng viên",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("9a34bdd4-fa97-4e2f-9960-b19a68826be9"),
                            ConcurrencyStamp = "be9fe581-1b06-495e-a5f0-d82d3d915b7a",
                            Description = "Vai trò học viên",
                            Name = "Student",
                            NormalizedName = "student"
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Score", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.HasKey("ID");

                    b.ToTable("SCORE");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Điểm chuyên cần"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Điểm thường xuyên"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Điểm giữa môn"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Điểm kết thúc môn"
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.StudentAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("UserID");

                    b.ToTable("STUDENT_ANSWER");
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.StudentAnswerDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(null);

                    b.Property<string>("EssayPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue(null);

                    b.Property<float?>("Mark")
                        .HasColumnType("real");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("StudentAnswerContent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue(null);

                    b.Property<int>("StudentAnswerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("StudentAnswerID");

                    b.ToTable("STUDENT_ANSWER_DETAIL");
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Subject", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<float>("AssiduousScorePercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0.1f);

                    b.Property<int>("CreditCount")
                        .HasColumnType("int");

                    b.Property<float>("FinalScorePercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0.5f);

                    b.Property<float>("FrequentScorePercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0.2f);

                    b.Property<float>("MiddleScorePercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0.2f);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("ID");

                    b.ToTable("SUBJECT");

                    b.HasData(
                        new
                        {
                            ID = "CC4206",
                            AssiduousScorePercent = 0f,
                            CreditCount = 3,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Nhập môn lập trình"
                        },
                        new
                        {
                            ID = "DH4202",
                            AssiduousScorePercent = 0f,
                            CreditCount = 3,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Kỹ thuật lập trình"
                        },
                        new
                        {
                            ID = "DH4203",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Cấu trúc dữ liệu & giải thuật"
                        },
                        new
                        {
                            ID = "TC4209",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Lập trình hướng đối tượng"
                        },
                        new
                        {
                            ID = "DC4204",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Cơ sở dữ liệu"
                        },
                        new
                        {
                            ID = "DC4106",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Kiến trúc máy tính"
                        },
                        new
                        {
                            ID = "DT4208",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Lập trình Java"
                        },
                        new
                        {
                            ID = "DT4315",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Công nghệ phần mềm"
                        },
                        new
                        {
                            ID = "DT4205",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "SQL Server"
                        },
                        new
                        {
                            ID = "DT4301",
                            AssiduousScorePercent = 0f,
                            CreditCount = 4,
                            FinalScorePercent = 0f,
                            FrequentScorePercent = 0f,
                            MiddleScorePercent = 0f,
                            Name = "Mạng máy tính"
                        });
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.SubjectAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("SubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("UserID");

                    b.ToTable("SUBJECT_ACCOUNT");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ROLE_CLAIM");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("USER_CLAIM");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("USER_LOGIN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("USER_ROLE");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("efe5c78c-bbc5-40e5-a106-1f07d4b4fcdb"),
                            RoleId = new Guid("61a4fad5-402c-4ce0-845d-1fbd2b91956f")
                        },
                        new
                        {
                            UserId = new Guid("4a2d9b6e-97c4-41bd-a929-f778972db109"),
                            RoleId = new Guid("1e6d489f-1df4-4dab-b873-ce3224d87f94")
                        },
                        new
                        {
                            UserId = new Guid("9e7773ef-083c-4a8e-8ed2-9e36cd704913"),
                            RoleId = new Guid("9a34bdd4-fa97-4e2f-9960-b19a68826be9")
                        },
                        new
                        {
                            UserId = new Guid("8bc30f33-6382-45fd-a54a-0dec677631d9"),
                            RoleId = new Guid("9a34bdd4-fa97-4e2f-9960-b19a68826be9")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("USER_TOKEN");
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Account", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Class", "Class")
                        .WithMany("Accounts")
                        .HasForeignKey("ClassID");
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Answer", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Exam", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.ExamDetail", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Exam", "Exam")
                        .WithMany("ExamDetails")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Question", "Question")
                        .WithMany("ExamDetails")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Question", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.QuestionGroup", "Group")
                        .WithMany("Questions")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.Result", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Score", "Score")
                        .WithMany("Results")
                        .HasForeignKey("ScoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.StudentAnswer", "StudentAnswer")
                        .WithMany("Results")
                        .HasForeignKey("StudentAnswerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Subject", "Subject")
                        .WithMany("Results")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Account", "Account")
                        .WithMany("Results")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.StudentAnswer", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Exam", "Exam")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Account", "Account")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.StudentAnswerDetail", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Answer", "Answer")
                        .WithMany("StudentAnswerDetails")
                        .HasForeignKey("AnswerID");

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Question", "Question")
                        .WithMany("StudentAnswerDetails")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.StudentAnswer", "StudentAnswer")
                        .WithMany("StudentAnswerDetails")
                        .HasForeignKey("StudentAnswerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeThongQuanLyCongTacKhaoThi.Data.Entities.SubjectAccount", b =>
                {
                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Class", "Class")
                        .WithMany("SubjectAccounts")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Subject", "Subject")
                        .WithMany("SubjectAccounts")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeThongQuanLyCongTacKhaoThi.Data.Entities.Account", "Account")
                        .WithMany("SubjectAccounts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
